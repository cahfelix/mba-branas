Site Referencia para estudo
https://refactoring.guru/design-patterns


DTO - Data Transfer Object
Objeto que só tem propriedades, sendo utilizado para transporte entre camadas da aplicação


Repository
Realizar a persistencia de aggregates (cluster de objetos de dominio como entities e value objetcts), separando essa responsabilidade da aplicacao
Com o Repository. A lógica de negócio fica separada da lógica de acesso a dados. Fica mais fácil de testar, manter, trocar de banco de dados e entender o sistema.


Adapter 
Converte uma interface de uma classe por outra esperada pelo cliente, permitindo que classes incompativeis trabalhem juntas
outra permitindo que você reduza o acoplamento.

OCP 
Open Closed/ Principle 
Fechado para modificacao e aberto para extensão
Crie pontos de extensão, evitando mexer no que já eta funcionando e evitando fragilizar o codigo.
Nao acumular codigo demais no mesmo lugar

Strategy
Criar comportamento intercambiavel
https://refactoring.guru/design-patterns/strategy

Dynamic Factory
Cria ruma instancia com base em uma string


Presenter
Formatar e adequar um determinado conteudo, um determinado connjunto de dados, a necessidade dos clientes
Padroes tem haver com responsabilidade


Decorator
https://refactoring.guru/design-patterns/decorator
Permite acrescentar funcionalidades a um objeto existente (OCP = agregue pontos de extencao  sem mexes no q ja existe)

Controller
Conecte camadas diferentes, geralmente um driver, repassando os dados de entrada e retornando a saida de acordo com o drive


